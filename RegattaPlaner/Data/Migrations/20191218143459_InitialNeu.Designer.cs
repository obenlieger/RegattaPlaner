// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegattaPlaner.Data;

namespace RegattaPlaner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191218143459_InitialNeu")]
    partial class InitialNeu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Boatclass", b =>
                {
                    b.Property<int>("BoatclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.HasKey("BoatclassId");

                    b.ToTable("Boatclasses");
                });

            modelBuilder.Entity("RegattaPlaner.Models.CampingFee", b =>
                {
                    b.Property<int>("CampingFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampingFeeId");

                    b.ToTable("CampingFees");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("RegattaPlaner.Models.ClubCampingFee", b =>
                {
                    b.Property<int>("CampingFeeId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("ClubCampingFeeId")
                        .HasColumnType("int");

                    b.Property<int>("campingcount")
                        .HasColumnType("int");

                    b.HasKey("CampingFeeId", "ClubId");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubCampingFees");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoatclassId")
                        .HasColumnType("int");

                    b.Property<int>("RaceclassId")
                        .HasColumnType("int");

                    b.HasKey("CompetitionId");

                    b.HasIndex("BoatclassId");

                    b.HasIndex("RaceclassId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("RegattaPlaner.Models.DeletedStartboats", b =>
                {
                    b.Property<int>("DeletedStartboatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedRaceId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedStartboatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("deleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("wasLate")
                        .HasColumnType("bit");

                    b.HasKey("DeletedStartboatId");

                    b.ToTable("DeletedStartboats");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Birthyear")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentYear")
                        .HasColumnType("int");

                    b.Property<int>("RentedToClubId")
                        .HasColumnType("int");

                    b.Property<bool>("isRented")
                        .HasColumnType("bit");

                    b.HasKey("MemberId");

                    b.HasIndex("ClubId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Oldclass", b =>
                {
                    b.Property<int>("OldclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToAge")
                        .HasColumnType("int");

                    b.HasKey("OldclassId");

                    b.ToTable("Oldclasses");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RRFreeStartslots", b =>
                {
                    b.Property<int>("RRFreeStartslotsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FreeStartslots")
                        .HasColumnType("int");

                    b.Property<int>("ReportedRaceId")
                        .HasColumnType("int");

                    b.HasKey("RRFreeStartslotsId");

                    b.ToTable("RRFreeStartslots");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoatclassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinishType")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldclassId")
                        .HasColumnType("int");

                    b.Property<string>("RaceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceDrawId")
                        .HasColumnType("int");

                    b.Property<int>("RaceTypId")
                        .HasColumnType("int");

                    b.Property<int>("RaceclassId")
                        .HasColumnType("int");

                    b.Property<int>("RacestatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Realstarttime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedRaceId")
                        .HasColumnType("int");

                    b.Property<bool>("ResultSpoken")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool>("Spoken")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAbteilungslauf")
                        .HasColumnType("bit");

                    b.HasKey("RaceId");

                    b.HasIndex("BoatclassId");

                    b.HasIndex("OldclassId");

                    b.HasIndex("RaceTypId");

                    b.HasIndex("RaceclassId");

                    b.HasIndex("RacestatusId");

                    b.HasIndex("RegattaId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RaceDraw", b =>
                {
                    b.Property<int>("RaceDrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndlaufCount")
                        .HasColumnType("int");

                    b.Property<int>("HoffnungslaufCount")
                        .HasColumnType("int");

                    b.Property<int>("RaceLength")
                        .HasColumnType("int");

                    b.Property<int>("ReportedSBCountFrom")
                        .HasColumnType("int");

                    b.Property<int>("ReportedSBCountTo")
                        .HasColumnType("int");

                    b.Property<int>("VorlaufCount")
                        .HasColumnType("int");

                    b.Property<int>("ZwischenlaufCount")
                        .HasColumnType("int");

                    b.Property<bool>("isAbteilungslauf")
                        .HasColumnType("bit");

                    b.HasKey("RaceDrawId");

                    b.ToTable("RaceDraws");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RaceDrawRules", b =>
                {
                    b.Property<int>("RaceDrawRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlacementFrom")
                        .HasColumnType("int");

                    b.Property<int>("PlacementTo")
                        .HasColumnType("int");

                    b.Property<int>("RaceDrawId")
                        .HasColumnType("int");

                    b.Property<int>("RaceSequence")
                        .HasColumnType("int");

                    b.Property<int>("RaceTypId")
                        .HasColumnType("int");

                    b.Property<int>("ToRaceSequence")
                        .HasColumnType("int");

                    b.Property<int>("ToRaceTypId")
                        .HasColumnType("int");

                    b.HasKey("RaceDrawRuleId");

                    b.HasIndex("RaceDrawId");

                    b.HasIndex("RaceTypId");

                    b.ToTable("RaceDrawRules");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RaceTyp", b =>
                {
                    b.Property<int>("RaceTypId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isFinal")
                        .HasColumnType("bit");

                    b.HasKey("RaceTypId");

                    b.ToTable("RaceTyps");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Raceclass", b =>
                {
                    b.Property<int>("RaceclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceclassId");

                    b.ToTable("Raceclasses");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Racestatus", b =>
                {
                    b.Property<int>("RacestatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RacestatusId");

                    b.ToTable("Racestati");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Regatta", b =>
                {
                    b.Property<int>("RegattaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accomodation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Catering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Choosen")
                        .HasColumnType("bit");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Judge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportOpening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReportSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Security")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartersLastYear")
                        .HasColumnType("int");

                    b.Property<int>("Startslots")
                        .HasColumnType("int");

                    b.Property<float>("SubscriberFee")
                        .HasColumnType("real");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaterId")
                        .HasColumnType("int");

                    b.Property<int>("Waterdepth")
                        .HasColumnType("int");

                    b.HasKey("RegattaId");

                    b.HasIndex("ClubId");

                    b.HasIndex("WaterId");

                    b.ToTable("Regattas");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaCampingFee", b =>
                {
                    b.Property<int>("CampingFeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.HasKey("CampingFeeId", "RegattaId");

                    b.HasIndex("RegattaId");

                    b.ToTable("RegattaCampingFees");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaClub", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Invited")
                        .HasColumnType("bit");

                    b.HasKey("ClubId", "RegattaId");

                    b.HasIndex("RegattaId");

                    b.ToTable("RegattaClubs");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaCompetition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.HasKey("CompetitionId", "RegattaId");

                    b.HasIndex("RegattaId");

                    b.ToTable("RegattaCompetitions");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaOldclass", b =>
                {
                    b.Property<int>("OldclassId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.HasKey("OldclassId", "RegattaId");

                    b.HasIndex("RegattaId");

                    b.ToTable("RegattaOldclasses");
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaStartingFee", b =>
                {
                    b.Property<int>("StartingFeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.HasKey("StartingFeeId", "RegattaId");

                    b.HasIndex("RegattaId");

                    b.ToTable("RegattaStartingFees");
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedRace", b =>
                {
                    b.Property<int>("ReportedRaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("FreeStartslots")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldclassId")
                        .HasColumnType("int");

                    b.Property<string>("RaceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<int>("StartboatCount")
                        .HasColumnType("int");

                    b.Property<bool>("isAbteilungslauf")
                        .HasColumnType("bit");

                    b.Property<bool>("isCreated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportedRaceId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("OldclassId");

                    b.HasIndex("RegattaId");

                    b.ToTable("ReportedRaces");
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboat", b =>
                {
                    b.Property<int>("ReportedStartboatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoStartslot")
                        .HasColumnType("bit");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedRaceId")
                        .HasColumnType("int");

                    b.Property<bool>("isLate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("modifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportedStartboatId");

                    b.HasIndex("ClubId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("RegattaId");

                    b.HasIndex("ReportedRaceId");

                    b.ToTable("ReportedStartboats");
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboatMember", b =>
                {
                    b.Property<int>("ReportedStartboatId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Seatnumber")
                        .HasColumnType("int");

                    b.HasKey("ReportedStartboatId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ReportedStartboatMembers");
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboatStandby", b =>
                {
                    b.Property<int>("ReportedStartboatId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Standbynumber")
                        .HasColumnType("int");

                    b.HasKey("ReportedStartboatId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ReportedStartboatStandbys");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Startboat", b =>
                {
                    b.Property<int>("StartboatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Placement")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("RegattaId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedStartboatId")
                        .HasColumnType("int");

                    b.Property<int>("StartboatstatusId")
                        .HasColumnType("int");

                    b.Property<int>("Startslot")
                        .HasColumnType("int");

                    b.HasKey("StartboatId");

                    b.HasIndex("ClubId");

                    b.HasIndex("RaceId");

                    b.HasIndex("RegattaId");

                    b.HasIndex("ReportedStartboatId");

                    b.HasIndex("StartboatstatusId");

                    b.ToTable("Startboats");
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartboatMember", b =>
                {
                    b.Property<int>("StartboatId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("StartboatId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("StartboatMembers");
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartboatStandby", b =>
                {
                    b.Property<int>("StartboatId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Standbynumber")
                        .HasColumnType("int");

                    b.HasKey("StartboatId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("StartboatStandbys");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Startboatstatus", b =>
                {
                    b.Property<int>("StartboatstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StartboatstatusId");

                    b.ToTable("Startboatstati");
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartingFee", b =>
                {
                    b.Property<int>("StartingFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("BoatclassId")
                        .HasColumnType("int");

                    b.Property<int>("FromOldclassId")
                        .HasColumnType("int");

                    b.Property<int>("OldclassId")
                        .HasColumnType("int");

                    b.Property<int>("ToOldclassId")
                        .HasColumnType("int");

                    b.HasKey("StartingFeeId");

                    b.HasIndex("BoatclassId");

                    b.HasIndex("OldclassId");

                    b.ToTable("StartingFees");
                });

            modelBuilder.Entity("RegattaPlaner.Models.Water", b =>
                {
                    b.Property<int>("WaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterId");

                    b.ToTable("Waters");
                });

            modelBuilder.Entity("RegattaPlaner.ViewModels.Mannschaftswertung", b =>
                {
                    b.Property<int>("MWId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldclassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wertung")
                        .HasColumnType("float");

                    b.HasKey("MWId");

                    b.ToTable("Mannschaftswertung");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.ClubCampingFee", b =>
                {
                    b.HasOne("RegattaPlaner.Models.CampingFee", "campingFee")
                        .WithMany("ClubCampingFees")
                        .HasForeignKey("CampingFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Club", "club")
                        .WithMany("ClubCampingFees")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.Competition", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Boatclass", "Boatclasses")
                        .WithMany("Competitions")
                        .HasForeignKey("BoatclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Raceclass", "Raceclasses")
                        .WithMany("Competitions")
                        .HasForeignKey("RaceclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.Member", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.Race", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Boatclass", "Boatclass")
                        .WithMany("Races")
                        .HasForeignKey("BoatclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Oldclass", "Oldclass")
                        .WithMany("Races")
                        .HasForeignKey("OldclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.RaceTyp", "RaceTyp")
                        .WithMany()
                        .HasForeignKey("RaceTypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Raceclass", "Raceclass")
                        .WithMany("Races")
                        .HasForeignKey("RaceclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Racestatus", "Racestatus")
                        .WithMany("Races")
                        .HasForeignKey("RacestatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regatta")
                        .WithMany("Races")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RaceDrawRules", b =>
                {
                    b.HasOne("RegattaPlaner.Models.RaceDraw", "RaceDraw")
                        .WithMany("RaceDrawRules")
                        .HasForeignKey("RaceDrawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.RaceTyp", "RaceTyp")
                        .WithMany("RaceDrawRules")
                        .HasForeignKey("RaceTypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.Regatta", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Club", "Club")
                        .WithMany("Regatten")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Water", "Waters")
                        .WithMany()
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaCampingFee", b =>
                {
                    b.HasOne("RegattaPlaner.Models.CampingFee", "CampingFees")
                        .WithMany("RegattaCampingFees")
                        .HasForeignKey("CampingFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regattas")
                        .WithMany("RegattaCampingFees")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaClub", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Club", "Club")
                        .WithMany("RegattaClubs")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regatta")
                        .WithMany("RegattaClubs")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaCompetition", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Competition", "Competitions")
                        .WithMany("RegattaCompetitions")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regattas")
                        .WithMany("RegattaCompetitions")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaOldclass", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Oldclass", "Oldclasses")
                        .WithMany("RegattaOldclasses")
                        .HasForeignKey("OldclassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regattas")
                        .WithMany("RegattaOldclasses")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.RegattaStartingFee", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Regatta", "Regattas")
                        .WithMany("RegattaStartingFees")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.StartingFee", "StartingFees")
                        .WithMany("RegattaStartingFees")
                        .HasForeignKey("StartingFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedRace", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Oldclass", "Oldclass")
                        .WithMany("ReportedRaces")
                        .HasForeignKey("OldclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regatta")
                        .WithMany()
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboat", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Club", "Club")
                        .WithMany("ReportedStartboats")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Competition", null)
                        .WithMany("ReportedStartboats")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regatta")
                        .WithMany("ReportedStartboats")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.ReportedRace", "ReportedRace")
                        .WithMany("ReportedStartboats")
                        .HasForeignKey("ReportedRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboatMember", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Member", "Member")
                        .WithMany("ReportedStartboatMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.ReportedStartboat", "ReportedStartboat")
                        .WithMany("ReportedStartboatMembers")
                        .HasForeignKey("ReportedStartboatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.ReportedStartboatStandby", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Member", "Member")
                        .WithMany("ReportedStartboatStandbys")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.ReportedStartboat", "ReportedStartboat")
                        .WithMany("ReportedStartboatStandbys")
                        .HasForeignKey("ReportedStartboatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.Startboat", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Club", "Club")
                        .WithMany("Startboats")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Race", "Race")
                        .WithMany("Startboats")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Regatta", "Regatta")
                        .WithMany("Startboats")
                        .HasForeignKey("RegattaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.ReportedStartboat", "ReportedStartboat")
                        .WithMany("Startboats")
                        .HasForeignKey("ReportedStartboatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Startboatstatus", "Startboatstatus")
                        .WithMany("Startboats")
                        .HasForeignKey("StartboatstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartboatMember", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Member", "Member")
                        .WithMany("StartboatMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Startboat", "Startboat")
                        .WithMany("StartboatMembers")
                        .HasForeignKey("StartboatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartboatStandby", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Member", "Member")
                        .WithMany("StartboatStandbys")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Startboat", "Startboat")
                        .WithMany("StartboatStandbys")
                        .HasForeignKey("StartboatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RegattaPlaner.Models.StartingFee", b =>
                {
                    b.HasOne("RegattaPlaner.Models.Boatclass", "Boatclasses")
                        .WithMany()
                        .HasForeignKey("BoatclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegattaPlaner.Models.Oldclass", "Oldclasses")
                        .WithMany()
                        .HasForeignKey("OldclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
